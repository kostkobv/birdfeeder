package utils_test

import (
	"testing"
	"utils"

	"github.com/stretchr/testify/assert"
)

func TestInitEncoder(t *testing.T) {
	encoder := utils.InitEncoder()

	assert.NotEmpty(t, encoder)
}

func TestUdhenc_Encode(t *testing.T) {
	encoder := utils.InitEncoder()

	t.Run("GSM 7-bit encode", func(t *testing.T) {
		t.Run("encode regular symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"48656c6c6f2e2049276d2066696e652c20616e6420796f753f"}}
			m := encoder.Encode("Hello. I'm fine, and you?")
			assert.Equal(t, e, *m)
		})

		t.Run("encode 2 space char symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"1b2f1b401b281b291b3c1b3e1b3d1b651b14"}}
			m := encoder.Encode(`\|{}[]~‚Ç¨^`)
			assert.Equal(t, e, *m)
		})

		t.Run("encode mixed symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"4048656c6c6f21205d697d6f2e205e6265722e201315201b2873796d626f6c731b29"}}
			m := encoder.Encode("¬°Hello! √ëi√±o. √úber. ŒìŒ© {symbols}")
			assert.Equal(t, e, *m)
		})

		t.Run("example from MessageBird documentation", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"546865206d65737361676520746f2062652073656e74"}}
			m := encoder.Encode("The message to be sent")
			assert.Equal(t, e, *m)
		})

		t.Run("mixed symbols splitting", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{
				"546865206d65737361676520746f2062652073656e742c2074686174206e656564732073706c697474696e6720616e642068617320737472616e67652073796d626f6c73206c696b652074686f73653a201b3c1b3e1b281b291b2f2e20486f7765766572206974206e6565647320746f206265206c6f6e676572207468616e206f746865727320736f2069742077696c6c2074616b65206d6f",
				"72652074686174203136302073796d626f6c732e2e2e",
			}}

			m := encoder.Encode(`The message to be sent, that needs splitting and has strange symbols like those: []{}\. However it needs to be longer than others so it will take more that 160 symbols...`)
			assert.Equal(t, e, *m)
		})

		t.Run("splitting for message that is bigger than max SMS capacity", func(t *testing.T) {
			m := encoder.Encode(`Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vehicula aliquam aliquam.
Aliquam mollis nunc quis mi aliquam rutrum. Praesent hendrerit dolor ac ligula suscipit condimentum.
Aenean sollicitudin neque ut ante faucibus porta. Donec eget tortor iaculis, consequat velit lobortis,
iaculis odio. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;
Integer sed lacus vitae urna malesuada varius. Nunc bibendum elit ex, a elementum eros tempor nec.
Nam quis eros ullamcorper, tincidunt nibh at, aliquet massa. Vivamus pretium maximus tempor.
Vivamus viverra convallis ex. Vivamus est felis, luctus ac urna ut, tristique rhoncus mauris.
Aliquam tincidunt dignissim mi, ut congue neque tincidunt sit amet. Nullam id lorem mauris.
Phasellus luctus arcu at aliquam ornare. Maecenas ornare lorem semper orci auctor, eget placerat sem
finibus. Suspendisse eget auctor sem. Phasellus cursus, orci non blandit tempor, justo neque venenatis
nunc, non facilisis arcu diam ut elit. In at porta mi. Nam nisi risus, commodo eu ex vel, varius fermentum
leo. Curabitur hendrerit nisl massa, eget placerat justo porttitor eget. Integer tempor rhoncus pharetra.
Interdum et malesuada fames ac ante ipsum primis in faucibus. Curabitur vel posuere nunc. Quisque pretium
commodo gravida. Maecenas ultrices metus eu metus commodo, at euismod magna faucibus. Duis volutpat, magna
eu cursus mollis, mauris purus lobortis nulla, vitae sagittis mauris mauris eget tortor. Cras vel ante libero.
Aliquam rhoncus malesuada lacus, sed gravida nisl consequat non. Nunc ut suscipit mi, nec luctus lorem.
Mauris consequat laoreet leo in dignissim. Phasellus et faucibus diam. Proin et ante vulputate elit
finibus laoreet vulputate sed ante. Vivamus blandit eros sed nisl pretium egestas. Ut ac posuere libero,
a rutrum ligula. Pellentesque ac congue nibh.
Etiam elementum aliquet accumsan. Donec auctor porta velit in consectetur. Pellentesque rutrum lacinia
orci ac tempus. In mattis posuere.`)
			assert.Equal(t, 9, len(m.Messages))
		})
	})

	t.Run("UC-2 encode", func(t *testing.T) {
		t.Run("encode UC-2 symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{"041f044004380432043504420021d83dde00"}}
			m := encoder.Encode("–ü—Ä–∏–≤–µ—Ç!üòÄ")
			assert.Equal(t, e, *m)
		})

		t.Run("encode only UC-2 symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{"041f04400438043204350442d83dde000020041a0430043a002004340435043b0430"}}
			m := encoder.Encode("–ü—Ä–∏–≤–µ—ÇüòÄ –ö–∞–∫ –¥–µ–ª–∞")
			assert.Equal(t, e, *m)
		})

		t.Run("splitted UC-2 message", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{
				"042d0442043e00200441043e043e043104490435043d0438043500200434043e043b0436043d043e00200438043c04350442044c00200431043e043b04350435002000370030002004410438043c0432043e043b043e0432002c00200434043b044f00200442043e0433043e002004470442043e0431044b00200431044b",
				"043b043000200432043e0437043c043e0436043d043e04410442044c0020043f0440043e044204350441044204380440043e043204300442044c002004400430043704340435043b0435043d0438043500200441043e043e043104490435043d04380439002e",
			}}

			m := encoder.Encode("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å " +
				"–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
			assert.Equal(t, e, *m)
		})

		t.Run("splitting for message that is bigger than max SMS capacity", func(t *testing.T) {
			m := encoder.Encode(`–ù–µ —Å–ª–µ–¥—É–µ—Ç, –æ–¥–Ω–∞–∫–æ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é
				–ø–æ–∑–∏—Ü–∏–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è. –ù–µ —Å–ª–µ–¥—É–µ—Ç, –æ–¥–Ω–∞–∫–æ –∑–∞–±—ã–≤–∞—Ç—å,
				—á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤
				—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏ –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
				—Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏.
				–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Ç –Ω–∞—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
				–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ
				–∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –ò–¥–µ–π–Ω—ã–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∞ —Ç–∞–∫–∂–µ
				–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π,
				–∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
				–¢–æ–≤–∞—Ä–∏—â–∏! –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ
				—É—á–∞—Å—Ç–∏—è. –¢–æ–≤–∞—Ä–∏—â–∏! –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
				—Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π, –∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
				–¢–æ–≤–∞—Ä–∏—â–∏! —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º —Ä–∞–∑–≤–∏—Ç–∏—è.
				–ó–∞–¥–∞—á–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∂–µ –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
				—Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—É—â–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.
				–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç
				–æ—Ç –Ω–∞—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º
				–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏.
				–ò–¥–µ–π–Ω—ã–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∞ —Ç–∞–∫–∂–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏
				—É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—É—â–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å
				—à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π, –∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤
				–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏ –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç
				–æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
				–° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
				—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º
				–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏
				–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
				—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
				—à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è.`)
			assert.Equal(t, 9, len(m.Messages))
		})
	})
}

func TestUdhenc_SplitTextMessage(t *testing.T) {
	encoder := utils.InitEncoder()

	t.Run("GSM 7-bit encode", func(t *testing.T) {
		t.Run("encode regular symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"Hello. I'm fine, and you?"}}
			m := encoder.SplitTextMessage("Hello. I'm fine, and you?")
			assert.Equal(t, e, *m)
		})

		t.Run("encode 2 space char symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{`\|{}[]~‚Ç¨^`}}
			m := encoder.SplitTextMessage(`\|{}[]~‚Ç¨^`)
			assert.Equal(t, e, *m)
		})

		t.Run("encode mixed symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"¬°Hello! √ëi√±o. √úber. ŒìŒ© {symbols}"}}
			m := encoder.SplitTextMessage("¬°Hello! √ëi√±o. √úber. ŒìŒ© {symbols}")
			assert.Equal(t, e, *m)
		})

		t.Run("example from MessageBird documentation", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{"The message to be sent"}}
			m := encoder.SplitTextMessage("The message to be sent")
			assert.Equal(t, e, *m)
		})

		t.Run("mixed symbols splitting", func(t *testing.T) {
			e := utils.Encoded{utils.Plain, []string{
				`The message to be sent, that needs splitting and has strange symbols like those: []{}\. However it needs to be longer than others so it will take mo`,
				"re that 160 symbols...",
			}}

			m := encoder.SplitTextMessage(`The message to be sent, that needs splitting and has strange symbols like those: []{}\. However it needs to be longer than others so it will take more that 160 symbols...`)
			assert.Equal(t, e, *m)
		})

		t.Run("splitting for message that is bigger than max SMS capacity", func(t *testing.T) {
			m := encoder.SplitTextMessage(`Lorem ipsum dolor sit amet, consectetur adipiscing elit. In vehicula aliquam aliquam.
Aliquam mollis nunc quis mi aliquam rutrum. Praesent hendrerit dolor ac ligula suscipit condimentum.
Aenean sollicitudin neque ut ante faucibus porta. Donec eget tortor iaculis, consequat velit lobortis,
iaculis odio. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;
Integer sed lacus vitae urna malesuada varius. Nunc bibendum elit ex, a elementum eros tempor nec.
Nam quis eros ullamcorper, tincidunt nibh at, aliquet massa. Vivamus pretium maximus tempor.
Vivamus viverra convallis ex. Vivamus est felis, luctus ac urna ut, tristique rhoncus mauris.
Aliquam tincidunt dignissim mi, ut congue neque tincidunt sit amet. Nullam id lorem mauris.
Phasellus luctus arcu at aliquam ornare. Maecenas ornare lorem semper orci auctor, eget placerat sem
finibus. Suspendisse eget auctor sem. Phasellus cursus, orci non blandit tempor, justo neque venenatis
nunc, non facilisis arcu diam ut elit. In at porta mi. Nam nisi risus, commodo eu ex vel, varius fermentum
leo. Curabitur hendrerit nisl massa, eget placerat justo porttitor eget. Integer tempor rhoncus pharetra.
Interdum et malesuada fames ac ante ipsum primis in faucibus. Curabitur vel posuere nunc. Quisque pretium
commodo gravida. Maecenas ultrices metus eu metus commodo, at euismod magna faucibus. Duis volutpat, magna
eu cursus mollis, mauris purus lobortis nulla, vitae sagittis mauris mauris eget tortor. Cras vel ante libero.
Aliquam rhoncus malesuada lacus, sed gravida nisl consequat non. Nunc ut suscipit mi, nec luctus lorem.
Mauris consequat laoreet leo in dignissim. Phasellus et faucibus diam. Proin et ante vulputate elit
finibus laoreet vulputate sed ante. Vivamus blandit eros sed nisl pretium egestas. Ut ac posuere libero,
a rutrum ligula. Pellentesque ac congue nibh.
Etiam elementum aliquet accumsan. Donec auctor porta velit in consectetur. Pellentesque rutrum lacinia
orci ac tempus. In mattis posuere.`)
			assert.Equal(t, 9, len(m.Messages))
		})
	})

	t.Run("UC-2 encode", func(t *testing.T) {
		t.Run("encode UC-2 symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{"–ü—Ä–∏–≤–µ—Ç!üòÄ"}}
			m := encoder.SplitTextMessage("–ü—Ä–∏–≤–µ—Ç!üòÄ")
			assert.Equal(t, e, *m)
		})

		t.Run("encode only UC-2 symbols", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{"–ü—Ä–∏–≤–µ—ÇüòÄ –ö–∞–∫ –¥–µ–ª–∞"}}
			m := encoder.SplitTextMessage("–ü—Ä–∏–≤–µ—ÇüòÄ –ö–∞–∫ –¥–µ–ª–∞")
			assert.Equal(t, e, *m)
		})

		t.Run("splitted UC-2 message", func(t *testing.T) {
			e := utils.Encoded{utils.Unicode, []string{
				"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã",
				"–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.",
			}}

			m := encoder.SplitTextMessage("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å " +
				"–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
			assert.Equal(t, e, *m)
		})

		t.Run("splitting for message that is bigger than max SMS capacity", func(t *testing.T) {
			m := encoder.SplitTextMessage(`–ù–µ —Å–ª–µ–¥—É–µ—Ç, –æ–¥–Ω–∞–∫–æ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é
				–ø–æ–∑–∏—Ü–∏–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è. –ù–µ —Å–ª–µ–¥—É–µ—Ç, –æ–¥–Ω–∞–∫–æ –∑–∞–±—ã–≤–∞—Ç—å,
				—á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤
				—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏ –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
				—Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏.
				–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Ç –Ω–∞—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
				–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å–ª–æ–∂–∏–≤—à–∞—è—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ
				–∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –ò–¥–µ–π–Ω—ã–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∞ —Ç–∞–∫–∂–µ
				–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π,
				–∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
				–¢–æ–≤–∞—Ä–∏—â–∏! –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ
				—É—á–∞—Å—Ç–∏—è. –¢–æ–≤–∞—Ä–∏—â–∏! –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
				—Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π, –∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
				–¢–æ–≤–∞—Ä–∏—â–∏! —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º —Ä–∞–∑–≤–∏—Ç–∏—è.
				–ó–∞–¥–∞—á–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∂–µ –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
				—Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—É—â–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.
				–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å—Ñ–µ—Ä–∞ –Ω–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç
				–æ—Ç –Ω–∞—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º
				–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏.
				–ò–¥–µ–π–Ω—ã–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∞ —Ç–∞–∫–∂–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏
				—É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—É—â–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å
				—à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º –≤–ª–µ—á–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π, –∑–∞–Ω–∏–º–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤
				–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏ –±–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç
				–æ—Ü–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
				–° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
				—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —à–∏—Ä–æ–∫–∏–º –∞–∫—Ç–∏–≤–æ–º
				–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏
				–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
				—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –†–∞–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
				—à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤) —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º –º–∞—Å—Å–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è.`)
			assert.Equal(t, 9, len(m.Messages))
		})
	})
}

func TestUdhenc_GenerateUDH(t *testing.T) {
	e := utils.InitEncoder()

	t.Run("generates unique UDH for message parts", func(t *testing.T) {
		p := uint8(1)
		parts := uint8(3)
		mesHash := uint32(1)
		udh1 := e.GenerateUDH(p, parts, mesHash)
		p++
		udh2 := e.GenerateUDH(p, parts, mesHash)
		p++
		udh3 := e.GenerateUDH(p, parts, mesHash)

		assert.Equal(t, "050003010301", udh1)
		assert.Equal(t, "050003010302", udh2)
		assert.Equal(t, "050003010303", udh3)
	})

	t.Run("same hash should have same UDH next time", func(t *testing.T) {
		p := uint8(1)
		parts := uint8(3)
		mesHash := uint32(1)
		udh1 := e.GenerateUDH(p, parts, mesHash)
		p++
		udh2 := e.GenerateUDH(p, parts, mesHash)
		p++
		udh3 := e.GenerateUDH(p, parts, mesHash)

		assert.Equal(t, "050003010301", udh1)
		assert.Equal(t, "050003010302", udh2)
		assert.Equal(t, "050003010303", udh3)
	})
}
